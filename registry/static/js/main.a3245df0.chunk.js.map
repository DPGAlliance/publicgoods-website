{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","sdg_labels","types","name","stage","sdgs","trunc","str","n","length","substr","Filters","props","state","liked","count","handleChange","bind","toggleVisible","event","checkboxId","display","target","id","split","checked","elems","document","getElementsByClassName","i","concurrentClasses","intersectionSet1","className","trim","filter","a","Object","keys","includes","intersectionSet2","intersectionSet3","intersection1","j","getElementById","intersection2","intersection3","style","this","countActive","parent","splits","nodeName","parentNode","transform","getElementsByTagName","setState","nominees","onClick","viewBox","xmlns","strokeLinejoin","strokeLinecap","strokeWidth","d","stroke","fill","Form","map","label","index","Check","key","type","defaultChecked","onChange","Component","ListItemBeta","item","nameText","href","rel","dpgLink","src","alt","height","license","itemClass","thesdg","sdg","k","categories","hasOwnProperty","openlicenses","openLicense","licenseURL","spdx","linkName","replace","description","dangerouslySetInnerHTML","__html","githubActivity","List","ReactDOM","render","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3245df0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Form from 'react-bootstrap/Form';\nimport nominees from './nominees.json';\n\nconst sdg_labels = [\"1. No Poverty\",\"2. Zero Hunger\",\"3. Good Health and Well-being\",\"4. Quality Education\",\"5. Gender Equality\",\"6. Clean Water and Sanitation\",\"7. Affordable and Clean Energy\",\"8. Decent Work and Economic Growth\",\"9. Industry, Innovation and Infrastructure\",\"10. Reduced Inequality\",\"11. Sustainable Cities and Communities\",\"12. Responsible Consumption and Production\",\"13. Climate Action\",\"14. Life Below Water\",\"15. Life on Land\",\"16. Peace and Justice Strong Institutions\",\"17. Partnerships to achieve the Goal\"]\nconst types = {\n  \"AI Model\": {\n    name: \"AI Model\"\n  },\n  \"Content\": {\n    name: \"Content\"\n  },\n  \"Data\": {\n    name: \"Data\"\n  },\n  \"Software\": {\n    name: \"Software\"\n  },\n  \"Standard\": {\n    name: \"Standard\"\n  }\n};\nconst stage = [];\nconst sdgs = [\"SDG1\", \"SDG2\", \"SDG3\", \"SDG4\", \"SDG5\", \"SDG6\", \"SDG7\", \"SDG8\", \"SDG9\", \"SDG10\", \"SDG11\", \"SDG12\", \"SDG13\", \"SDG14\", \"SDG15\", \"SDG16\", \"SDG17\"];\n\nfunction trunc(str, n){\n    return (str.length > n) ? str.substr(0, n-1) + '...' : str;\n};\n\nclass Filters extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { liked: false, count: 0};\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  handleChange(event) {\n    let checkboxId\n    let display;\n    if(event){\n      checkboxId = event.target.id.split('-')[0];\n      \n      display = event.target.checked;\n      \n    } else {\n      // When the page loads, handleChange() is called via componentDidMount()\n      // We only want to display DPGs at page load, so nominees is unchecked\n      // and so we set these two variables accordinly to get the desired behavior\n      checkboxId='nominee'\n      display=false\n    }\n    \n    var elems = document.getElementsByClassName(checkboxId);\n\n\n    for(let i=0; i < elems.length; i++) {\n      let concurrentClasses;\n      if(display) {\n        concurrentClasses = elems[i].className.trim().split(' ');\n      } else {\n        concurrentClasses = elems[i].className.trim().split(' ').filter(function(a){ return a !== checkboxId });\n      }\n      \n      let intersectionSet1 = concurrentClasses.filter(i => Object.keys(types).includes(i));\n      \n      let intersectionSet2 = concurrentClasses.filter(i => sdgs.includes(i));\n    \n      let intersectionSet3 = concurrentClasses.filter(i => stage.includes(i));\n      \n\n      let intersection1 = false;\n      for(let j=0; j < intersectionSet1.length; j++) {\n        if(document.getElementById(intersectionSet1[j]+'-checkbox').checked){\n          intersection1 = true;\n          break;\n        }\n      }\n      let intersection2 = false;\n      for(let j=0; j < intersectionSet2.length; j++) {\n        if(document.getElementById(intersectionSet2[j]+'-checkbox').checked){\n          intersection2 = true;\n          break;\n        }\n      }\n      let intersection3 = false;\n      for(let j=0; j < intersectionSet3.length; j++) {\n        if(document.getElementById(intersectionSet3[j]+'-checkbox').checked){\n          intersection3 = true;\n          break;\n        }\n      }\n\n      if (intersection1 && intersection2 && intersection3) {\n        elems[i].style.display = 'table-row';\n      } else {\n        elems[i].style.display = 'none';\n      }\n    }\n    this.countActive();\n  }\n\n  toggleVisible(event) {\n    let parent;\n    if(event.target.nodeName === 'path') {\n      parent = event.target.parentNode.parentNode;\n    } else if (event.target.nodeName === 'svg') {\n      parent = event.target.parentNode;\n    } else {\n      parent = event.target;\n    }\n    let splits = parent.id.split('-');\n    if(parent.style.transform === ''){\n      parent.style.transform = 'rotate(180deg)';\n      document.getElementById(splits[0]+'-options').style.display='none';\n    } else {\n      parent.style.transform = '';\n      document.getElementById(splits[0]+'-options').style.display='block';\n    }\n  }\n\n  componentDidMount() {\n    this.handleChange();\n  }\n\n  countActive() {\n    const elems = document.getElementById('mytable').getElementsByTagName('tr');\n    let count = 0;\n    for(let i=0; i<elems.length; i++) {\n      if(elems[i].style.display !== 'none'){\n        count++;\n      }\n    }\n    this.setState({count: count-1});\n  }\n\n  render() {\n      return (\n        <div>\n          <div className=\"filterSection\">\n            <p>Displaying {this.state.count} of <b>{nominees.length}</b> items</p>\n          </div>\n\n          <div className=\"filterSection\">\n            <div className=\"filterSectionTitle\">\n               <p className=\"filter_header\">Type</p>\n               <div className=\"icon\" onClick={this.toggleVisible} id=\"type-toggle\">\n                <svg viewBox=\"0 0 8 5\" xmlns=\"http://www.w3.org/2000/svg\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"1.35\">\n                  <path d=\"M7 1.053L4.027 4 1 1\" stroke=\"currentColor\" fill=\"none\"></path>\n                </svg>\n               </div>\n            </div>\n            <div className=\"filteredContent\" id=\"type-options\">\n                <Form>\n                  {Object.keys(types).map((label, index) => (\n                  <Form.Check \n                    key={index}\n                    type='checkbox'\n                    id={`${label}-checkbox`}\n                    label={trunc(types[label]['name'],25)}\n                    defaultChecked\n                    onChange = {this.handleChange}\n                  />\n                  ))}\n                </Form>\n            </div>\n          </div>\n\n          <div className=\"filterSection\">\n            <div className=\"filterHead\">\n              <div className=\"filterSectionTitle\">\n               <p className=\"filter_header\">SDG</p>\n               <div className=\"icon\" onClick={this.toggleVisible} id=\"sdg-toggle\">\n                <svg viewBox=\"0 0 8 5\" xmlns=\"http://www.w3.org/2000/svg\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"1.35\">\n                  <path d=\"M7 1.053L4.027 4 1 1\" stroke=\"currentColor\" fill=\"none\"></path>\n                </svg>\n               </div>\n              </div>\n            </div>\n            <div className=\"filteredContent\" id=\"sdg-options\">\n                <Form>\n                  {sdg_labels.map((label, index) => (\n                  <Form.Check \n                    key={index}\n                    type='checkbox'\n                    id={`SDG${index+1}-checkbox`}\n                    label={trunc(label, 25)}\n                    defaultChecked\n                    onChange = {this.handleChange}\n                  />\n                  ))}\n                </Form>\n            </div>\n        </div>\n       \n      </div>\n        ); \n  }\n}\n\nfunction ListItemBeta(props){\n\n  let item = props.item;\n  let index = props.index;\n\n  let name;\n  let nameText = item.name;\n\n  if(item.stage === 'DPG') {\n    name = <a href={'https://app.digitalpublicgoods.net/a/' + item.id} target=\"_blank\" rel=\"noopener noreferrer\">{nameText}</a>;\n    if(item.dpgLink){\n      name = <span>{name} <img src=\"dpgicon.svg\" alt=\"DPG icon\" height=\"25\"/></span>\n    } \n    /* else {\n      name = <span><a href=\"/blog/announcing-the-first-vetted-digital-public-goods-for-foundational-literacy-and-early-grade-reading/\" target=\"_blank\" rel=\"noopener noreferrer\">{nameText} <img src=\"dpgicon.svg\" alt=\"DPG icon\" height=\"25\"/></a></span>;\n    } */\n  }\n  else{\n    name = <a href={'https://app.digitalpublicgoods.net/a/' + item.id} target=\"_blank\" rel=\"noopener noreferrer\">{nameText}</a>;\n    /* if(item.hasOwnProperty('website') && item.website !== '') {\n        name = <a href={item.website} target=\"_blank\" rel=\"noopener noreferrer\">{nameText}</a>;\n      } else if(item.hasOwnProperty('repositories') && item.repositories.length) {\n          let repoIndex = 0;\n          if(item.repositories.length > 1) {\n            for(let i in item.repositories) {\n              if(item.repositories[i].name === 'main'){\n                repoIndex = i\n                break\n              }\n            }\n          }\n          name = <a href={item.repositories[repoIndex].url} target=\"_blank\" rel=\"noopener noreferrer\">{nameText}</a>;\n      } else {\n          name = {nameText}\n      } */\n  }\n\n  let itemClass='';\n   for (var j=0; j<item.sdgs.length; j++) {\n    \n    let thesdg = item.sdgs[j].sdg\n    thesdg = thesdg.split(':')[0]\n    itemClass += thesdg + \" \"\n    //itemClass += 'sdg'+item.sdgs[j].sdg.spilt(':',1)[0]+' '\n  }\n\n for (var k=0; k<item.categories.length; k++) {\n    itemClass += item.categories[k] + ' ';\n  } \n  itemClass += item.stage;\n\n  let license;\n  if (item.hasOwnProperty(\"openlicenses\")) {\n    license = item.openlicenses[0].openLicense;\n  } else {\n    for (let j=0; j<item.license.length; j++) {\n      license = <a href={item.license[j].licenseURL} target=\"_blank\" rel=\"noopener noreferrer\">{item.license[j].spdx} </a>\n    }\n  }\n\n  let linkName = item.name.replace(/ /g,'_')\n\n  return(\n    <tr key={index} className={itemClass}>\n      <td>{name}</td>\n      {/* eslint-disable-next-line */}\n      <td><a id={linkName} className=\"anchor\"></a>{item.description}</td>\n      <td>{license}</td>\n      <td><div dangerouslySetInnerHTML={{__html: item.githubActivity}} /></td>\n    </tr>\n  )\n\n}\n\nclass List extends Component {\n  render() {\n    return(\n        <table className=\"table\"> \n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n              <th>License</th>\n              <th>Past year of activity</th>\n            </tr>\n          </thead>\n          <tbody>\n            {nominees.map((item, index) => (\n              <ListItemBeta item={item} index={index} key={index}/>\n            ))}\n          </tbody>\n        </table>\n      )\n  }\n}\n\nReactDOM.render(<List />, document.querySelector('#mytable'));\nReactDOM.render(<Filters />, document.querySelector('#filters'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}